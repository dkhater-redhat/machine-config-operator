mode: 0755
path: "/usr/local/bin/openstack-kubelet-nodename"
contents:
  inline: |
    #!/bin/bash
    set -e -o pipefail

    NODEENV=/etc/kubernetes/node.env

    # This can be removed 1 release after it merges because all affected nodes
    # will have upgraded
    LEGACY_NODEENV=/etc/systemd/system/kubelet.service.d/20-openstack-node-name.conf
    if [ -e "${LEGACY_NODEENV}" ]; then
        # Legacy file was a systemd stanza with KUBELET_NODE_NAME specified in
        # a directive of the format:
        #   Environment="KUBELET_NODE_NAME=node.example.com"
        # New format is an environment file. The following extracts only the
        # contents of any Environment directives.
        echo "Migrating ${LEGACY_NODEENV} to ${NODEENV}"
        awk 'match($0, /^\s*Environment\s*=\s*"(.*)"\s*$/, value) { print value[1] }' < "${LEGACY_NODEENV}" > "${NODEENV}"
        rm "${LEGACY_NODEENV}"
        exit 0
    fi

    if [ -e "${NODEENV}" ]; then
        echo "Not replacing existing ${NODEENV}"
        exit 0
    fi

    # For compatibility with the OpenStack in-tree provider
    # Set node name to be instance name instead of the default FQDN hostname.
    # Try to get the hostname from config drive first if it's available
    # or fallback to the metadata service.
    # We'll first try to use config-drive: if a block device is found with a specific label,
    # we'll mount it and unmount it when not needed anymore. This is because the config drive is
    # unmounted by cloud-init.
    # If config-drive isn't found, then we'll try to reach the metadata server.
    if [ -n "$(blkid -t LABEL="config-2" -odevice)" ]; then
        config_drive_label="config-2"
    elif [ -n "$(blkid -t LABEL="CONFIG-2" -odevice)" ]; then
        config_drive_label="CONFIG-2"
    fi

    if [ -n "${config_drive_label}" ]; then
        echo "Using config drive to get the hostname"
        tmp_mount="$(mktemp -d)"
        mount -o ro -t auto "/dev/disk/by-label/${config_drive_label}" "${tmp_mount}"
        meta_data_file="$tmp_mount/openstack/2012-08-10/meta_data.json"
        if [ ! -f "${meta_data_file}" ]; then
            echo "Failed to find ${meta_data_file}"
            umount "${tmp_mount}" && rmdir "${tmp_mount}"
            exit 1
        fi
        # https://docs.openstack.org/nova/victoria/user/metadata.html#metadata-openstack-format
        hostname=$(jq -re .name "${meta_data_file}")
        if [[ -z "${hostname}" ]]; then
            echo "Failed to get hostname from $meta_data_file"
            umount "${tmp_mount}" && rmdir "${tmp_mount}"
            exit 1
        fi

        echo "KUBELET_NODE_NAME=${hostname}" > ${NODEENV}
        umount "${tmp_mount}" && rmdir "${tmp_mount}"
    else
        echo "Using metadata service to get the hostname"
        while true; do
            if [ "$SINGLE_STACK_IPV6" = true ]
            then
                metadata_ip6="fe80::a9fe:a9fe"
                # `ip route show to match` returns this:
                # <subnet or name> via <gateway ip> dev <nic> proto dhcp src <ip> metric <metric>
                # so the nic name is the first item after "dev"
                while read nic; do
                    # "curl" will return a non-zero exit code if the metadata is not reachable which would stop the script too soon.
                    # We also want to give a change (5 seconds) to reach the metadata before we consider that the given URL is not usable.
                    # Once hostname was found with a given nic, we just move on.
                    set +e
                    hostname=$(curl --connect-timeout 5 -s http://[${metadata_ip6}%25${nic}]:80/openstack/2012-08-10/meta_data.json | jq -re .name)
                    set -e
                    [ ! -z "${hostname}" ] && break
                done < <(ip -6 route show to match ${metadata_ip6} | awk '{for(i=1;i<NF;i++) if ($i == "dev") print $(i+1)}')
            else
                # https://docs.openstack.org/nova/victoria/user/metadata.html#metadata-openstack-format
                hostname=$(curl -s http://169.254.169.254/openstack/2012-08-10/meta_data.json | jq -re .name)
            fi
            if [[ -z "${hostname}" ]]; then
                sleep 5
                continue
            fi

            echo "KUBELET_NODE_NAME=${hostname}" > ${NODEENV}
            break
        done
    fi
